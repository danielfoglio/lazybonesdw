buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url 'http://repo.jfrog.org/artifactory/gradle-plugins'
        }
    }
}

plugins {
    id 'codenarc'
    id 'groovy'
    id 'maven'
    id 'net.saliman.cobertura' version '2.5.4'
    id 'com.github.johnrengelman.shadow' version '4.0.3'
    id 'com.jfrog.artifactory' version '4.8.1'
}

version=currentVersion
group=currentGroup

// Run code narc before the test phase begins
test.dependsOn codenarcMain

repositories {
    mavenLocal()
    mavenCentral()
    // Spock snapshots are available from the Sonatype OSS snapshot repository
    //maven { url "http://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {

    compile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    compile "io.dropwizard:dropwizard-core:${dropwizardVersion}"
    compile "io.dropwizard:dropwizard-testing:${dropwizardVersion}"
    compile "io.dropwizard:dropwizard-hibernate:${dropwizardVersion}"
    compile "io.dropwizard:dropwizard-migrations:${dropwizardVersion}"
    compile "io.dropwizard:dropwizard-auth:${dropwizardVersion}"
    compile "io.dropwizard:dropwizard-client:${dropwizardVersion}"
    compile "io.dropwizard:dropwizard-views:${dropwizardVersion}"

    compile 'com.h2database:h2:1.4.197'

    testCompile "io.dropwizard:dropwizard-testing:${dropwizardVersion}"
    testCompile "org.spockframework:spock-core:1.2-groovy-2.5"
    testRuntime "cglib:cglib-nodep:3.2.9"          // allows mocking of classes (in addition to interfaces)
    testRuntime "org.objenesis:objenesis:2.6"    // allows mocking of classes without default constructor (together with CGLIB)

    // needed for validation tests so logging in hibernate validator does not throw exception
//    compile 'ch.qos.logback:logback-classic:1.2.3'
//    compile "org.slf4j:log4j-over-slf4j:1.7.25"
}

jar {
    manifest {
        attributes 'Main-Class': "${mainClass}"
        attributes 'Built-Date': new Date() //now
        attributes 'Built-By': System.getProperty('user.name')
        attributes 'Build-Jdk': System.getProperty('java.version')
        attributes 'Implementation-Title': project.name
        attributes 'Implementation-Version': project.version
        attributes 'Implementation-Vendor-Id': project.group
        attributes 'Dropwizard-Version': project.buildDir
    }
}

cobertura {
    coverageFormats = ['xml', 'html']
    coverageIncludes = ['**/*.java', '**/*.groovy']
    coverageSourceDirs = [sourceSets.main.allSource.srcDirs]
}

codenarc {
    configFile = rootProject.file('codenarcrule.groovy')
    reportFormat = System.properties['codeNarcOutput'] ?: 'html'
}

task run {
    // Grab any dw. properties that are specified on the command line and pass to the Java process (i.e. dw.http.port=8080)
    dependsOn = ['shadowJar']
    group = 'dropwizard'
    description = 'Run service using dev configuration'
    doLast {
        def props = project.ext.properties.findAll { it.key.startsWith('dw') }
        javaexec {
            main = '-jar'
            args = ["${shadowJar.getArchivePath()}", 'server', 'dev_config.yml']
            systemProperties = props
        }
    }
}

task migrate {
    dependsOn = ['shadowJar']
    group = 'dropwizard'
    description = 'Run migrations using the dev configuration'
    doLast {
        javaexec {
            main = '-jar'
            args = ["${shadowJar.getArchivePath()}", 'db', 'migrate', 'dev_config.yml']
        }
    }
}

task dropAll {
    dependsOn = ['shadowJar']
    group = 'dropwizard'
    description = 'Run drop-all database command'
    doLast {
        javaexec {
            main = '-jar'
            args = ["${shadowJar.getArchivePath()}", 'db', 'drop-all', 'dev_config.yml', '--confirm-delete-everything']
        }
    }
}
